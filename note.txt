一、	两数相加
1、	数位过多
2、	连续进位
二、3sum(15)
双指针解法，固定一个找两个，也可固定两个找一个使用hash_map（似乎超时？），注意如何使找到的各个三元组不同
Vector size返回值类型是unsigned int！！！
三、链表两两交换节点
递归解法：
递归中我们应该关心的主要有三点：
1、返回值
2、调用单元做了什么
3、终止条件
在本题中：

返回值：交换完成的子链表
调用单元：设需要交换的两个点为 head 和 next，head 连接后面交换完成的子链表，next 连接 head，完成交换
终止条件：head 为空指针或者 next 为空指针，也就是当前无节点或者只有一个节点，无法进行交换
代码
递归解法

class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode next = head.next;
        head.next = swapPairs(next.next);
        next.next = head;
        return next;
    }
}

作者：guanpengchn
链接：https://leetcode-cn.com/problems/two-sum/solution/hua-jie-suan-fa-24-liang-liang-jiao-huan-lian-biao/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
四、链表旋转（leetcode61）
1、递归用的真的差
2、想到先把链表连成环，在到相应位置断开
3、我的同学真滴强
五、奇偶链表（lc_328）
认真读题，主要问题在于学会直接使用链表中的元素而不是新建节点
六、快速排序
1、快排不快什么水平
2、空间复杂度过高
3、如何原地修改？
4、理解分治的思想
七、二叉树的遍历
前序中序后序 DFS BFS
莫里斯遍历
八、二叉搜索树的个数（LC_96）
这几天一直在遍历二叉树就没上传。
二叉搜索树的定义、搜索、输出排序（中序遍历）、后继与先驱、查询、插入与删除、最大与最小关键字
https://blog.csdn.net/csdn0123zl/article/details/81253648
后继与先驱的推导
https://www.cnblogs.com/jasontodd/p/9613836.html //这个少了RP的LP与x的LP的大小比较，现在想到的是因为RP的LP是LP的父节点
动态规划的初次尝试，设变量、找到递推关系、求解
还可通过数学演绎法求解：卡特兰数
九、整数翻转
有字符串解法和数学解法两种办法，字符串解法较慢，优先选择数学解法，注意溢出的判断，这里指定输入为32位int型，所以可以借用long long来判断是否溢出。话说long型为什么也是32位
十、回文数
字符串解法、数字解法，注意100021,1010这种数，具体看代码
十一、缺失数字（lc268）（back！！！）
求和法：值得注意的是发现数组的长度恰好等于题目中的n，另外前n项和有公式哎喂，I'm so vegetable
排序法不必多说
位运算：异或运算，仅0 1,1 0时为1，同时异或运算满足结合律，当两数相同时结果为0
class Solution {
    public int missingNumber(int[] nums) {
        int missing = nums.length;
        for (int i = 0; i < nums.length; i++) {
            missing ^= i ^ nums[i];
        }
        return missing;
    }
}

作者：LeetCode
链接：https://leetcode-cn.com/problems/two-sum/solution/que-shi-shu-zi-by-leetcode/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
十二、字符串转换为数字
对于字符串str，可以直接str[i],此时可作char类型处理（？）
溢出的处理
十三、除法的实现
1、连续倍加的应用
2、为防止溢出，把所有数转换为负数进行运算
3、注意a+b时，a，b都做int处理，此时也可能会出现溢出的情况
十四、无重复字符串（lc_3）
滑动窗口的思想，窗口如何滑动是提高效率的关键，同时为了提高查找速度，使用hashset和数字映射字符
十五、两地调度（lc_1029）
先认为所有人到A市，然后将A市到B市之间的费用差排序 贪心？
十五、动态规划
理解从暴力递归到带备忘录的递归，再到动态规划
https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-tao-lu-xiang-jie-by-wei-lai-bu-ke/
注意198题与322题
十六、细节
8.20 687
9.4 20 ")(" "(()" "("
两道题都有很多细节需要注意,687题需要注意的是题意的理解（怎么样才叫路径），以及通过类的属性储存最大值的技巧
十七、双指针
当需要解决连续相等问题方案时，可以通过双指针解决lc_26
十八、strStr（lc_28）
多种解法：
https://leetcode-cn.com/problems/implement-strstr/solution/c5chong-jie-fa-ku-han-shu-bfkmpbmsunday-by-2227/
几种匹配算法的解释：
https://blog.csdn.net/v_july_v/article/details/7041827
未解之谜
为什么在删除法二判断匹配字符串与原字符串长度之后，法二法三时间相差如此之多
测试例
源串"aaaaaa……  n个a" 匹配串"n-1个a加1个b"
十九、二分查找(lc_35)
注意问题：
当target比数组最大值大或比最小值小，当数组只有一个元素，、
start+end可能会溢出
左边界的移动问题，当区间仅有两个元素时，start=mid无法移动左边界
循环退出条件
返回左边界还是右边界
二分查找博客：https://leetcode-cn.com/problems/search-insert-position/solution/te-bie-hao-yong-de-er-fen-cha-fa-fa-mo-ban-python-/
二十、双指针（lc_11）
双指针从暴力法到考虑到指针移动方向的方法，算法的优化方向是向着如何更合理的移动指针方向进行。
二一、再谈动态规划
尝试了三道动态规划，lc_121,lc_53思考一下这两道题从暴力法到动态规划的过程，还是要从最小子问题出发，找到状态转移方程
对于lc_64,这道题我只写了一种解法，实际上可以在空间复杂度上优化，思考如何只是用一维的dp数组，以及如何不使用额外的数组解决问题
二十二、得到下一个排序（LC_31)
非常巧妙地想法，值得一看
二十二、求得众数（lc_169)
https://leetcode-cn.com/problems/majority-element/solution/qiu-zhong-shu-by-leetcode-2/
在这个题解法中，投票、随机、排序都体现了对于条件众数出现次数大于n/2的充分利用
二十三、求n个数的公约数（lc_914)
二十四、矩阵中的二分查找(lc_74)
当有序时，使用二分查找
循环继续条件left<=right
边界值更新left=mid+1;right=mid-1;
矩阵中元素的索引可以计算（将二维数组展开）
二十五、lc_561数组拆分
假设数组已经排好序，要使划分的数对之中的较小值的和最大，应该使没有被选中计算和的数最小，假如从数组头部开始挑选，首先应该选择第二个元素牺牲，接下来只能选第四个，因为必须要有一个比他小的数与他配对，以此类推