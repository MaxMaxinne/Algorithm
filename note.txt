一、	两数相加
1、	数位过多
2、	连续进位
二、3sum(15)
双指针解法，固定一个找两个，也可固定两个找一个使用hash_map（似乎超时？），注意如何使找到的各个三元组不同
Vector size返回值类型是unsigned int！！！
三、链表两两交换节点
递归解法：
递归中我们应该关心的主要有三点：
1、返回值
2、调用单元做了什么
3、终止条件
在本题中：

返回值：交换完成的子链表
调用单元：设需要交换的两个点为 head 和 next，head 连接后面交换完成的子链表，next 连接 head，完成交换
终止条件：head 为空指针或者 next 为空指针，也就是当前无节点或者只有一个节点，无法进行交换
代码
递归解法

class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode next = head.next;
        head.next = swapPairs(next.next);
        next.next = head;
        return next;
    }
}

作者：guanpengchn
链接：https://leetcode-cn.com/problems/two-sum/solution/hua-jie-suan-fa-24-liang-liang-jiao-huan-lian-biao/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
四、链表旋转（leetcode61）
1、递归用的真的差
2、想到先把链表连成环，在到相应位置断开
3、我的同学真滴强
五、奇偶链表（lc_328）
认真读题，主要问题在于学会直接使用链表中的元素而不是新建节点
六、快速排序
1、快排不快什么水平
2、空间复杂度过高
3、如何原地修改？
4、理解分治的思想
七、二叉树的遍历
前序中序后序 DFS BFS
莫里斯遍历
八、二叉搜索树的个数（LC_96）
这几天一直在遍历二叉树就没上传。
二叉搜索树的定义、搜索、输出排序（中序遍历）、后继与先驱、查询、插入与删除、最大与最小关键字
https://blog.csdn.net/csdn0123zl/article/details/81253648
后继与先驱的推导
https://www.cnblogs.com/jasontodd/p/9613836.html //这个少了RP的LP与x的LP的大小比较，现在想到的是因为RP的LP是LP的父节点
动态规划的初次尝试，设变量、找到递推关系、求解
还可通过数学演绎法求解：卡特兰数
九、整数翻转
有字符串解法和数学解法两种办法，字符串解法较慢，优先选择数学解法，注意溢出的判断，这里指定输入为32位int型，所以可以借用long long来判断是否溢出。话说long型为什么也是32位
十、回文数
字符串解法、数字解法，注意100021,1010这种数，具体看代码
十一、缺失数字（lc268）（back！！！）
求和法：值得注意的是发现数组的长度恰好等于题目中的n，另外前n项和有公式哎喂，I'm so vegetable
排序法不必多说
位运算：异或运算，仅0 1,1 0时为1，同时异或运算满足结合律，当两数相同时结果为0
class Solution {
    public int missingNumber(int[] nums) {
        int missing = nums.length;
        for (int i = 0; i < nums.length; i++) {
            missing ^= i ^ nums[i];
        }
        return missing;
    }
}

作者：LeetCode
链接：https://leetcode-cn.com/problems/two-sum/solution/que-shi-shu-zi-by-leetcode/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
十二、字符串转换为数字
对于字符串str，可以直接str[i],此时可作char类型处理（？）
溢出的处理
十三、除法的实现
1、连续倍加的应用
2、为防止溢出，把所有数转换为负数进行运算
3、注意a+b时，a，b都做int处理，此时也可能会出现溢出的情况
十四、无重复字符串（lc_3）
滑动窗口的思想，窗口如何滑动是提高效率的关键，同时为了提高查找速度，使用hashset和数字映射字符
十五、两地调度（lc_1029）
先认为所有人到A市，然后将A市到B市之间的费用差排序 贪心？
十五、动态规划
理解从暴力递归到带备忘录的递归，再到动态规划
https://leetcode-cn.com/problems/coin-change/solution/dong-tai-gui-hua-tao-lu-xiang-jie-by-wei-lai-bu-ke/
注意198题与322题
十六、细节
8.20 687
9.4 20 ")(" "(()" "("
两道题都有很多细节需要注意,687题需要注意的是题意的理解（怎么样才叫路径），以及通过类的属性储存最大值的技巧
十七、双指针
当需要解决连续相等问题方案时，可以通过双指针解决lc_26
十八、strStr（lc_28）
多种解法：
https://leetcode-cn.com/problems/implement-strstr/solution/c5chong-jie-fa-ku-han-shu-bfkmpbmsunday-by-2227/
几种匹配算法的解释：
https://blog.csdn.net/v_july_v/article/details/7041827
未解之谜
为什么在删除法二判断匹配字符串与原字符串长度之后，法二法三时间相差如此之多
测试例
源串"aaaaaa……  n个a" 匹配串"n-1个a加1个b"
十九、二分查找(lc_35)
注意问题：
当target比数组最大值大或比最小值小，当数组只有一个元素，、
start+end可能会溢出
左边界的移动问题，当区间仅有两个元素时，start=mid无法移动左边界
循环退出条件
返回左边界还是右边界
二分查找博客：https://leetcode-cn.com/problems/search-insert-position/solution/te-bie-hao-yong-de-er-fen-cha-fa-fa-mo-ban-python-/
二十、双指针（lc_11）
双指针从暴力法到考虑到指针移动方向的方法，算法的优化方向是向着如何更合理的移动指针方向进行。
二一、再谈动态规划
尝试了三道动态规划，lc_121,lc_53思考一下这两道题从暴力法到动态规划的过程，还是要从最小子问题出发，找到状态转移方程
对于lc_64,这道题我只写了一种解法，实际上可以在空间复杂度上优化，思考如何只是用一维的dp数组，以及如何不使用额外的数组解决问题
二十二、得到下一个排序（LC_31)
非常巧妙地想法，值得一看
二十二、求得众数（lc_169)
https://leetcode-cn.com/problems/majority-element/solution/qiu-zhong-shu-by-leetcode-2/
在这个题解法中，投票、随机、排序都体现了对于条件众数出现次数大于n/2的充分利用
二十三、求n个数的公约数（lc_914)
二十四、矩阵中的二分查找(lc_74)
当有序时，使用二分查找
循环继续条件left<=right
边界值更新left=mid+1;right=mid-1;
矩阵中元素的索引可以计算（将二维数组展开）
二十五、lc_561数组拆分
假设数组已经排好序，要使划分的数对之中的较小值的和最大，应该使没有被选中计算和的数最小，假如从数组头部开始挑选，首先应该选择第二个元素牺牲，接下来只能选第四个，因为必须要有一个比他小的数与他配对，以此类推
二十六、深度优先搜索，广度优先搜索
深度优先-栈，递归
广度优先-队列
二十七、杨辉三角形(lc_119)
节省空间的方法是在计算每一层时不使用last，而是采用覆盖current，注意需要倒序覆盖
二十八、二叉树的遍历总结
102与107二叉树的层次遍历与反向层次遍历：递归解法可以通过将不同层加入到vector的不同层中，非递归解法为利用队列（想想为什么不用栈），通过在一次循环中遍历整个层，因此在下一次循环开始是可以通过队列长度确定该层元素个数，同时可以根据这个数字遍历当前层。
而反向遍历也可以通过递归实现，可以在一层递归中遍历整个层，在递归层层返回时再将该层的元素push到最终结果的容器中。
129树从根节点到叶子结点的数字和，递归方法非常容易想到，对于非递归方法，当需要记录遍历到当前结点的状态时，可以再使用一个栈或者队列储存信息（或者使用pair)
二十八、只出现一次的数字（lc_136）
使用异或操作，利用异或操作的性质得到答案
二十九、回溯与深度优先(lc_79)
两个技巧，一个是改变方向时使用数组，另一个是在递归过程中可以先改变board，回溯回来的时候再把board改回去，具体可见题目法一与法二的区别
三十、双指针（lc_80）
此题双指针p1用于指向需要探测的数组元素，另一个p2指向写入位置，最终要的是要意识到满足写入条件的数是要不等于p2-2位置的数，同时当写入之后，p2只需自增即可
三十一、倒红酒（lc_799)
模拟法，把所有的酒先倒入第一个杯子中，然后再模拟酒往下流
三十二、字符串分组(lc_49)
两个非常好的思想，一个是把每个字符串排序，这样可以确定字符串类别或者是记录一个字符串中字母的出现频率，这样复杂度更低，一种更牛的想法是将每个字母用质数表示，这样不同字符串乘积必然为不同的，另一个思想是将一类字符串与对应的排序的串建立映射使用map
三十三、合并多个有序链表(lc_23)
朴素思想：逐一比较每个链表的节点
使用优先队列：优化找到多个链表中找到最小值点的操作
分治算法：在一次合并中将各个链表配对，对于每对链表进行合并：

如何计算逐一两两合并链表的时间复杂度？

Q:方法 5：分治的聚合次数不是log2(K)次，是K-1次，每次聚合只会减少一个链表，聚合K-1次得到最终链表。 无论是分治法还是逐一聚合法都是如此，数学规律是相同的。
A:两个链表聚合确实发生了K-1次。但是注意，题解中把 K个链表两两聚合，生成K/2个链表的过程叫一次Merging。然后这样的Merging总共发生log(K)次。每一次Merging需要比较的次数是N。 所以总的时间复杂度是O(N*log(K))。 这才是两两聚合和逐一聚合的本质差别。 逐一聚合的情况下，两个聚合的链表长度会发生偏斜，其中一个链表长度越来越长。考虑最坏情况K个链表每个仅包含一个元素（N为总元素数，这里N=K)，那么逐一聚合的总复杂度就是O(1+2+3+...N-1) = O(K*N). 而两两聚合的情况下，仍然考虑刚才的例子，

第一轮K个链表，聚合完成后剩K/2个，发生的比较次数是 1 + 1 + 1 + ...+ 1 =1*K = N.

第二轮K/2个链表，聚合完成后剩K/4个，发生的比较次数是(最坏情况) 2+2+2+ ... + 2 = 2 * K/2 = N .

第三轮K/4个链表，聚合完成后剩K/8个，发生的比较次数 4 + 4 + 4 + .... + 4 = 4 * K/4 = N .

.....

最后一轮剩2个链表，比较次数 K/2 + K/2 = 2* K/2 = N .

总共有log(K)轮，总比较次数 N*log(K)
三十四、lc_283(双指针)
贴一个更好的解法
void moveZeroes(vector<int>& nums) {
    for (int lastNonZeroFoundAt = 0, cur = 0; cur < nums.size(); cur++) {
        if (nums[cur] != 0) {
            swap(nums[lastNonZeroFoundAt++], nums[cur]);
        }
    }
}

作者：LeetCode
链接：https://leetcode-cn.com/problems/move-zeroes/solution/yi-dong-ling-by-leetcode/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
三十五、找到数组中消失的数字（lc_448)
解法一：把所有的数交换到他应该在的位置，那不在位置上的数就是缺失的数
值得注意的是要判断交换的两个数是否相等
一种不需要额外空间的交换方法：
下面直接给结论：“基于异或运算”利用了“异或运算”是不进位的二进制加法。它有如下性质：




如果 a ^ b = c ，那么 a ^ c = b 与 b ^ c = a 同时成立，利用这一条，可以用于交换两个变量的值。

于是，交换两个变量的值，例如 a 和 b，不使用第三个变量，可以这样做：

a = a ^ b
b = a ^ b
a = a ^ b

作者：liweiwei1419
链接：https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/solution/tong-pai-xu-ji-yu-yi-huo-yun-suan-jiao-huan-liang-/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


解法二：
标记法，可以把一个数应该在的位置标记为负，这样正数所在的位置即为缺失的数

vector<int> findDisappearedNumbers(vector<int>& nums) 
{
	vector<int> res;
	for (auto i : nums)
	{
		nums[abs(i)-1]=-abs(nums[abs(i) - 1]);
	}
	for (int i = 0; i < nums.size(); i++)
	{
		if (nums[i] > 0)
			res.push_back(i + 1);
	}
	return res;
}
三十四、满二叉树计算节点数
首先需要明确完全二叉树的定义：它是一棵空树或者它的叶子节点只出在最后两层，若最后一层不满则叶子节点只在最左侧。

再来回顾一下满二叉的节点个数怎么计算，如果满二叉树的层数为h，则总节点数为：2^h - 1.
那么我们来对root节点的左右子树进行高度统计，分别记为left和right,有以下两种结果：

left == right。这说明，左子树一定是满二叉树，因为节点已经填充到右子树了，左子树必定已经填满了。所以左子树的节点总数我们可以直接得到，是2^left - 1，加上当前这个root节点，则正好是2^left。再对右子树进行递归统计。
left != right。说明此时最后一层不满，但倒数第二层已经满了，可以直接得到右子树的节点个数。同理，右子树节点+root节点，总数为2^right。再对左子树进行递归查找。
关于如何计算二叉树的层数，可以利用下面的递归来算，当然对于完全二叉树，可以利用其特点，不用递归直接算，具体请参考最后的完整代码。

private int countLevel(TreeNode root){
        if(root == null){
            return 0;
        }
        return Math.max(countLevel(root.left),countLevel(root.right)) + 1;
}
如何计算2^left，最快的方法是移位计算，因为运算符的优先级问题，记得加括号哦。

完整版代码：

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int countNodes(TreeNode root) {
        if(root == null){
           return 0;
        } 
        int left = countLevel(root.left);
        int right = countLevel(root.right);
        if(left == right){
            return countNodes(root.right) + (1<<left);
        }else{
            return countNodes(root.left) + (1<<right);
        }
    }
    private int countLevel(TreeNode root){
        int level = 0;
        while(root != null){
            level++;
            root = root.left;
        }
        return level;
    }
}

作者：xiao-ping-zi-5
链接：https://leetcode-cn.com/problems/count-complete-tree-nodes/solution/chang-gui-jie-fa-he-ji-bai-100de-javajie-fa-by-xia/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

计算2的n次幂：n乘2左移1位 n<<1,那么2^n乘n个2,1<<n,只有整数才能做移位
三十五、单调栈（lc_496)
一种特殊逻辑的栈，似乎专门解决下一个更大元素这个问题（?）
介绍：
https://leetcode-cn.com/problems/next-greater-element-i/solution/dan-diao-zhan-jie-jue-next-greater-number-yi-lei-w/
三十六、验证栈序列（lc_946)
主要有两种思想，一种是根据pushed验证poped顺序，另一种是根据poped验证pushed顺序，第一种好一点