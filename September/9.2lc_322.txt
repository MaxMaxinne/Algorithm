//自顶向下
class Solution {
public:
    int coinChange(vector<int>& coins,int remain,vector<int>& memory){
        if(remain==0)
            return 0;
        if(remain<0)
            return -1;
        if(memory[remain]!=INT_MIN)
            return memory[remain];
        int minSum=INT_MAX;
        for(int i=0;i<coins.size();i++){
            int sum=coinChange(coins,remain-coins[i],memory);
            if(sum<0) continue;
            if(sum<minSum)
                minSum=sum+1;
        }
        if(minSum==INT_MAX){
            memory[remain]=-1;
            return -1;
        }
        memory[remain]=minSum;
        return minSum;
    }
    int coinChange(vector<int>& coins, int amount) {
        vector<int> memory(amount+1,INT_MIN);
        return coinChange(coins,amount,memory);
    }
};
//自底向上
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        vector<int> ans(amount+1,INT_MAX-1);
        ans[0]=0;
        for(int i=1;i<=amount;i++){
            for(int j=0;j<coins.size();j++){
                if(i>=coins[j])
                    if(ans[i-coins[j]]+1<ans[i])
                        ans[i]=ans[i-coins[j]]+1;
            }
        }
        if(ans[amount]==INT_MAX-1)
            return -1;
        else
            return ans[amount];
    }
};
