#include<sstream>
template <typename T>
class mystack {
private:
	vector<T> s;
    int head;
public:
	void push(T n) {
		if (s.empty())
			head = -1;
		s.push_back(n);
		head++;
	}
	T pop() {
		if (s.empty())
			return NULL;
		int top = s[head];
		s.pop_back();
        head--;
		return top;
	}
};
class Solution {
public:
    int stringToInt(string str){
        int result;
        istringstream is(str);
        is >> result;
        return result;
    }
    int evalRPN(vector<string>& tokens) {
        mystack<int> num;
        int a,b;
        for(int i=0;i<tokens.size();i++){
            if(tokens[i]=="+"){
                b=num.pop();
                a=num.pop();
                num.push(a+b);
            }
            else if(tokens[i]=="-"){
                b=num.pop();
                a=num.pop();
                num.push(a-b);
            }
            else if(tokens[i]=="*"){
                b=num.pop();
                a=num.pop();
                num.push(a*b);
            }
            else if(tokens[i]=="/"){
                    b=num.pop();
                    a=num.pop();
                    num.push(a/b);
           }
            else
                    num.push(stringToInt(tokens[i]));
        }
            return num.pop();
    }
};