//窗口移动单步
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int max=0,j;
        string temp="";
        for(int i=0;i<s.length();i++){
            temp="";
            for(j=i;j<s.length()&&temp.find(s[j])==temp.npos;j++){
                temp+=s[j];
            }
            if(max<j-i)
                max=j-i;
            if(j>=s.length())
                return max;
        }
        return max;
    }
};
//多步移动，由于使用了substr和find还是很慢，解决方法是使用数字映射字符及hashset
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int max=0,i=0,j=0,length=s.length(),index=0;
        string temp="";
        while(i<length&&j<length){
            if((index=temp.find(s[j]))==temp.npos){
                if(max<j-i+1)
                    max=j-i+1;
                temp+=s[j++];
            }else{
                temp=temp.substr(index+1);
                i=s.substr(i).find(s[j])+1+i;
                temp+=s[j++];
            }
        }
        return max;
    }
};